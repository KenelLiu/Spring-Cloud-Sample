Publisher (Code)
    public interface Publisher<T> {
        public void subscribe(Subscriber<? super T> s);
    }

Rule:
1.The total number of onNext´s signalled by a Publisher to a Subscriber MUST be less than or equal to the total number
    of elements requested by that Subscriber´s Subscription at all times.

2.A Publisher MAY signal fewer onNext than requested and terminate the Subscription by calling onComplete or onError.

3.onSubscribe, onNext, onError and onComplete signaled to a Subscriber MUST be signaled serially.

4.If a Publisher fails it MUST signal an onError.

5.If a Publisher terminates successfully (finite stream) it MUST signal an onComplete.

6.If a Publisher signals either onError or onComplete on a Subscriber, that Subscriber’s Subscription MUST be considered cancelled.

7.Once a terminal state has been signaled (onError, onComplete) it is REQUIRED that no further signals occur.

8.If a Subscription is cancelled its Subscriber MUST eventually stop being signaled.

9.Publisher.subscribe MUST call onSubscribe on the provided Subscriber prior to any other signals to that Subscriber
  and MUST return normally.except when the provided Subscriber is null in which case it MUST throw a java.lang.NullPointerException
  to the caller. for all other situations the only legal way to signal failure (or reject the Subscriber) is by calling
  onError (after calling onSubscribe).

10.Publisher.subscribe MAY be called as many times as wanted but MUST be with a different Subscriber each time

11.A Publisher MAY support multiple Subscribers and decides whether each Subscription is unicast or multicast.