Subscription (Code)
    public interface Subscription {
        public void request(long n);
        public void cancel();
    }

Rule:

1.Subscription.request and Subscription.cancel MUST only be called inside of its Subscriber context.

2.The Subscription MUST allow the Subscriber to call Subscription.request synchronously from within onNext or onSubscribe.

3.Subscription.request MUST place an upper bound(设置上限) on possible synchronous recursion between Publisher and
  Subscriber.

4.Subscription.request SHOULD respect the responsivity of its caller by returning in a timely manner(及时).

5.Subscription.cancel MUST respect the responsivity of its caller by returning in a timely manner, MUST be
  idempotent（幂等）and MUST be thread-safe.

6.After the Subscription is cancelled, additional Subscription.request(long n) MUST be NOPs.

7.After the Subscription is cancelled, additional Subscription.cancel() MUST be NOPs.

8.While the Subscription is not cancelled, Subscription.request(long n) MUST register the given number of additional
 elements to be produced to the respective subscriber.

9.While the Subscription is not cancelled, Subscription.request(long n) MUST signal onError with a java.lang.IllegalArgumentException
  if the argument is <= 0. The cause message SHOULD explain that non-positive(非肯定) request signals are illegal.

10.While the Subscription is not cancelled, Subscription.request(long n) MAY synchronously call onNext
   on this (or other) subscriber(s).

11.While the Subscription is not cancelled, Subscription.request(long n) MAY synchronously call onComplete or onError
   on this (or other) subscriber(s).

12.While the Subscription is not cancelled, Subscription.cancel() MUST request the Publisher to eventually stop signaling its Subscriber.
   The operation is NOT REQUIRED to affect the Subscription immediately.

13.While the Subscription is not cancelled, Subscription.cancel() MUST request the Publisher to eventually drop any references
   to the corresponding subscriber.

14.While the Subscription is not cancelled, calling Subscription.cancel MAY cause the Publisher, if stateful, to transition into the shut-down state
   if no other Subscription exists at this point [see 1.9].

15.Calling Subscription.cancel MUST return normally.

16.Calling Subscription.request MUST return normally.

17.A Subscription MUST support an unbounded number of calls to request and MUST support a demand up to 2^63-1 (java.lang.Long.MAX_VALUE).
  A demand equal or greater than 2^63-1 (java.lang.Long.MAX_VALUE) MAY be considered by the Publisher as “effectively unbounded”.