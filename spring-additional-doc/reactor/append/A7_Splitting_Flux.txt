I want to split a Flux<T> into a Flux<Flux<T>>, by a boundary criteria:
    of size: window(int)
        with overlapping or dropping windows: window(int, int)
    of time window(Duration)
        with overlapping or dropping windows: window(Duration, Duration)
    of size OR time (window closes when count is reached or timeout elapsed): windowTimeout(int, Duration)

    based on a predicate on elements: windowUntil
        emitting the element that triggered the boundary in the next window (cutBefore variant): .windowUntil(predicate, true)
        keeping the window open while elements match a predicate: windowWhile (non-matching elements are not emitted)
        driven by an arbitrary boundary represented by onNexts in a control Publisher: window(Publisher), windowWhen

I want to split a Flux<T> and buffer elements within boundaries together…​
into List:
    by a size boundary: buffer(int)
        ​with overlapping or dropping buffers: buffer(int, int)
    by a duration boundary: buffer(Duration)
        with overlapping or dropping buffers: buffer(Duration, Duration)
    by a size OR duration boundary: bufferTimeout(int, Duration)

    by an arbitrary criteria boundary: bufferUntil(Predicate)
        putting the element that triggered the boundary in the next buffer: .bufferUntil(predicate, true)
        buffering while predicate matches and dropping the element that triggered the boundary: bufferWhile(Predicate)
        driven by an arbitrary boundary represented by onNexts in a control Publisher: buffer(Publisher), bufferWhen

    into an arbitrary "collection" type C: use variants like buffer(int, Supplier<C>)

I want to split a Flux<T> so that element that share a characteristic end up in the same sub-flux: groupBy(Function<T,K>) TIP:
    Note that this returns a Flux<GroupedFlux<K, T>>, each inner GroupedFlux shares the same K key accessible through key().