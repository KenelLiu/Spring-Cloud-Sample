
that emits a T, and I already have: just
    ​from an Optional<T>: Mono#justOrEmpty(Optional<T>)
    ​from a potentially null T: Mono#justOrEmpty(T)

that emits a T returned by a method: just as well
    ​but lazily captured: use Mono#fromSupplier

that emits several T I can explicitly enumerate: Flux#just(T…​)
that iterates over:
    an array: Flux#fromArray
    a collection or iterable: Flux#fromIterable
    a range of integers: Flux#range
    a Stream supplied for each Subscription: Flux#fromStream(Supplier<Stream>)

that emits from various single-valued sources such as:
    a Supplier<T>: Mono#fromSupplier
    a task: Mono#fromCallable, Mono#fromRunnable
    a CompletableFuture<T>: Mono#fromFuture
    that completes: empty
    that errors immediately: error

but lazily build the Throwable: error(Supplier<Throwable>)
    that never does anything: never
    that is decided at subscription: defer
    that depends on a disposable resource: using

    that generates events programmatically (can use state):
        synchronously and one-by-one: Flux#generate
        asynchronously (can also be sync), multiple emissions possible in one pass: Flux#create (Mono#create as well, without the multiple emission aspect)