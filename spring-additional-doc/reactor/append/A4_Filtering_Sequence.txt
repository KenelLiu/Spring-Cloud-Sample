I want to filter a sequence:
    based on an arbitrary criteria: filter
    that is asynchronously computed: filterWhen
    restricting on the type of the emitted objects: ofType

by ignoring the values altogether: ignoreElements

by ignoring duplicates:in the whole sequence (logical set): Flux#distinct
between subsequently emitted items (deduplication): Flux#distinctUntilChanged

I want to keep only a subset of the sequence:
    by taking N elements:
        at the beginning of the sequence: Flux#take(long)
        based on a duration: Flux#take(Duration)
        only the first element, as a Mono: Flux#next()

        at the end of the sequence: Flux#takeLast
        until a criteria is met (inclusive): Flux#takeUntil (predicate-based), Flux#takeUntilOther (companion publisher-based)
        while a criteria is met (exclusive): Flux#takeWhile

        using request(N) rather than cancellation: Flux#limitRequest(long)

    by taking at most 1 element:
        at a specific position: Flux#elementAt
        at the end: .takeLast(1)
        and emit an error if empty: Flux#last()
        and emit a default value if empty: Flux#last(T)

    by skipping elements:

        at the beginning of the sequence: Flux#skip(long)
        based on a duration: Flux#skip(Duration)
        at the end of the sequence: Flux#skipLast

        until a criteria is met (inclusive): Flux#skipUntil (predicate-based), Flux#skipUntilOther (companion publisher-based)
        while a criteria is met (exclusive): Flux#skipWhile

    by sampling items:
        by duration: Flux#sample(Duration)
        but keeping the first element in the sampling window instead of the last: sampleFirst
        by a publisher-based window: Flux#sample(Publisher)
        based on a publisher "timing out": Flux#sampleTimeout (each element triggers a publisher, and is emitted if that publisher does not overlap with the next)

I expect at most 1 element (error if more than one)
    and I want an error if the sequence is empty: Flux#single()
    and I want a default value if the sequence is empty: Flux#single(T)
    and I accept an empty sequence as well: Flux#singleOrEmpty